apply plugin: 'com.android.library'
//远程jitpack配置
apply plugin: 'com.github.dcendents.android-maven'
group = 'com.github.bingoloves'
//本地maven仓库配置
apply plugin: 'maven'
uploadArchives{
    repositories.mavenDeployer{
        //本地仓库路径
//        repository(url: uri('../repository'))
        repository(url:"file://F://private/common/repository/")
        // 唯一标识
        pom.groupId = "cn.cqs"
        // 项目名称
        pom.artifactId = "common"
        // 版本号
        pom.version = "1.0.0"
    }
    //编译命令 打开Terminal执行下面的命令 或者 在gradle视图中相应模块下Tasks->upload->uploadArchives
    //gradlew uploadArchives
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    def deps = rootProject.ext.dependencies
    implementation deps.appcompat
    implementation deps.palette
    implementation deps.recyclerview
    implementation deps.design
    implementation deps.luban
    implementation deps.mmkv
    implementation deps.autosize
    implementation deps.glide
    annotationProcessor deps.glideCompiler
    implementation deps.butterknife
    annotationProcessor deps.butterknifeCompiler
    api(deps.rxandroid) {
        exclude module: 'rxjava'
    }
    api deps.flycoTabLayout
    api deps.immersionbar
    api deps.anylayer
//    api (deps.anylayer){
//        transitive = false//是否依赖传递
//    }
    //网络模块
    api deps["retrofit"]
    api deps["retrofit-converter-gson"]
    api deps["retrofit-adapter-rxjava"]
    api deps["logging-interceptor"]
}

/**
 * 自定义jar文件 本项目中使用到了内部资源文件，不采用jar方式，改用aar
 *
 * module 里面的资源文件一定要删除光，硬性规定，如果你说资源文件有用。请打aar 包
 */
def _BASENAME = "CommonJar"
def _VERSION = "_v1.0.0"
def _DestinationPath = "build" //生成jar包的位置
def zipFile = file('build/intermediates/bundles/debug/classes.jar') //待打包文件位置

task deleteBuild(type:Delete){
    delete _DestinationPath + _BASENAME + _VERSION + ".jar"
}

task makeJar(type:Jar){
    from zipTree(zipFile)
    from fileTree(dir:'src/main',includes:['assets/**']) //将assets目录打入jar包
    baseName = _BASENAME + _VERSION
    destinationDir = file(_DestinationPath)
}
makeJar.dependsOn(deleteBuild, build)